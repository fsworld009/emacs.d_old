a bunch of setting and list
http://juanjoalvarez.net/es/detail/2014/sep/19/vim-emacsevil-chaotic-migration-guide/


buffer-move (swap buffer in diff windows)
http://stackoverflow.com/questions/1774832/how-to-swap-the-buffers-in-2-windows-emacs

 Goto the point of the most recent edit in the buffer.
https://funwithemacs.wordpress.com/2013/04/11/shaving-time-with-goto-chg/
http://www.emacswiki.org/GotoChg

syntax
 flycheck
add-to-list 'flycheck-checkers 'go-gofmt



auto complete

https://github.com/smihica/emmet-mode


file browser
http://www.emacswiki.org/emacs/TabBarMode
neotree

session
integrate with bookmark?
bookmark+



search
helm
https://github.com/Wilfred/ag.el
helm-ag
imenu

tag?



comment
https://github.com/redguardtoo/evil-nerd-commenter


spell check
http://www.emacswiki.org/FlySpell


elisp
 (define-key evil-normal-state-map (kbd "g p") 'evil-scroll-up)
 
 
 https://github.com/syohex/emacs-helm-ag
 https://github.com/Wilfred/ag.el
 

(evil-leader/set-key "e" 'evil-ace-jump-word-mode) ; ,e for Ace Jump (word)
(evil-leader/set-key "l" 'evil-ace-jump-line-mode) ; ,l for Ace Jump (line)
(evil-leader/set-key "x" 'evil-ace-jump-char-mode) ; ,x for Ace Jump (char)



http://www.emacswiki.org/emacs/WindowResize






      (
      :name elscreen
      :type git  
      :url "git://github.com/knu/elscreen.git" 
      :depends evil      
      :features elscreen
      :after (elscreen-start)
      )
      
      
      (
      :name evil-tabs
      :depends (evil elscreen)
      :type git  
      :url "git://github.com/krisajenkins/evil-tabs.git"  
      :features evil-tabs
      :after 
          (global-evil-tabs-mode t)
      )
      
      (
      :name web-mode
      :type git
      :url "git://github.com/fxbois/web-mode.git"
      :features web-mode
      :after  (progn
          (add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
          (add-to-list 'auto-mode-alist '("\\.htm\\'" . web-mode))
          (add-to-list 'auto-mode-alist '("\\.xml\\'" . web-mode))
          (add-to-list 'auto-mode-alist '("\\.css\\'" . web-mode))
          (add-to-list 'auto-mode-alist '("\\.scss\\'" . web-mode))
        )
      )
      
      ;;required for xah-html-mode
      (
      :name xfrp_find_replace_pairs
      :type git
      :url "git://github.com/xahlee/xfrp_find_replace_pairs.el.git"
      :features xfrp_find_replace_pairs
      )
      
      ;;required for xah-html-mode
      (
      :name xeu_elisp_util
      :type git
      :url "git://github.com/xahlee/xeu_elisp_util.el.git"
      :features xeu_elisp_util
      )
      
      ;;required for xah-html-mode
      (
      :name htmlize
      :type git
      :url "git://github.com/emacsmirror/htmlize.git"
      :features htmlize
      )
      
      (
      :name xah-html-mode
      :type git
      :url "git://github.com/xahlee/xah-html-mode.el.git"
      :features xah-html-mode
      :after (progn
            (add-to-list 'auto-mode-alist '("\\.html\\'" . xah-html-mode))
            (add-to-list 'auto-mode-alist '("\\.htm\\'" . xah-html-mode))
            (add-to-list 'auto-mode-alist '("\\.css\\'" . xah-html-mode))
          )
      )
      
            (
      :name obsidian-theme
      :type git  
      :url "git://github.com/mswift42/obsidian-theme.git"  
      :features obsidian-theme 
      :after (load-theme 'obsidian t)
         
      )  
      
      (
      :name color-theme-sons-of-obsidian
      :type git  
      :url "git://github.com/fsworld009/color-theme-sons-of-obsidian.el.git"  
      :features color-theme-sons-of-obsidian
      :after (load-theme 'color-theme-sons-of-obsidian t)
         
      )  
      
      
      (
      :name web-mode
      :type github
      :pkgname "fxbois/web-mode"
      :features web-mode
      :after  (progn
          (add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
          (add-to-list 'auto-mode-alist '("\\.htm\\'" . web-mode))
          (add-to-list 'auto-mode-alist '("\\.xml\\'" . web-mode))
          (add-to-list 'auto-mode-alist '("\\.css\\'" . web-mode))
          (add-to-list 'auto-mode-alist '("\\.scss\\'" . web-mode))
        )
      )
      
            (
      :name js2-mode
      :type github
      :pkgname "mooz/js2-mode"
      :features js2-mode

      )
          ;;js2-mode
    (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
    (add-hook 'js2-mode-hook (lambda () (flycheck-mode t)))
    (add-hook 'js2-mode-hook (lambda () (tern-mode t)))
      
      
      
(evil-leader/set-key-for-mode 'emacs-lisp-mode "b" 'byte-compile-file)      
clipboard behavior


;; C-x u  (`undo-tree-visualize')

https://github.com/timcharper/evil-surround

web-mode
js2-mode
magit

rainbow parenthesis
highlight html match tags

tab issues

emmet



https://github.com/zenozeng/yafolding.el
(global-set-key (kbd "s-d y") 'yafolding-discover)

 Hook into prog-mode-hook


          
          
folding
(add-hook 'prog-mode-hook
          (lambda () (yafolding-mode)))
 http://stackoverflow.com/questions/2399612/why-is-there-no-code-folding-in-emacs
 
 
 
 
 https://github.com/fgallina/multi-web-mode
 
 
 
 

      :after (progn
      (setq evil-emacs-state-cursor '("red" box))
            (setq evil-normal-state-cursor '("green" box))
            (setq evil-visual-state-cursor '("orange" box))
            (setq evil-insert-state-cursor '("red" bar))
            (setq evil-replace-state-cursor '("red" bar))
            (setq evil-operator-state-cursor '("red" hollow))
         )
         

(real-global-auto-complete-mode t)
         
auto-complete
tern+jsctags
(Tagbar)


http://ternjs.net/doc/manual.html#emacs
tern
Auto-Complete

If you want to use auto-complete.el for completion, append following codes:

(eval-after-load 'tern
   '(progn
      (require 'tern-auto-complete)
      (tern-ac-setup)))
      

(add-hook 'js-mode-hook (lambda () (tern-mode t)))


;; dirty fix for having AC everywhere
(define-globalized-minor-mode real-global-auto-complete-mode
  auto-complete-mode (lambda ()
                       (if (not (minibufferp (current-buffer)))
                         (auto-complete-mode 1))
                       ))


;;Don't use backup files
(setq make-backup-files nil)


;;for speedbar, doesn't work
 (speedbar-add-supported-extension "\\.css")
 (setq speedbar-use-imenu-flag nil)
(setq speedbar-fetch-etags-command "ctags")
(setq speedbar-fetch-etags-arguments '("-e" "-f" "-"))


tern Q&A
cannot find module 'xxxx'
->set NODE_PATH

open-network-stream: make client process failed: connection refused, :name, 127.0.0.1, :buffer, #<killed buffer>, :host, 127.0.0.1, :service, 54232, :nowait, nilInvalid face reference: helm-ff-symlink
1.delete  .tern-port in workind directory (current cd )
2.then add no-port option
(setq tern-command '("tern" "--no-port-file" "--persistent"))

Error running timer `ac-update-greedy': (wrong-type-argument stringp nil)
Error running timer `ac-show-menu': (wrong-type-argument stringp nil)
not sure what causes this but its code related




